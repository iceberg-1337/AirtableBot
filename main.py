import logging
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State
from pyairtable import Base, Table

api_key = 'API_KEY'
bot = Bot(token="BOT_Token")

storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
logging.basicConfig(level=logging.INFO)


class Check(StatesGroup):
    check = State()


class Find(StatesGroup):
    find = State()


class CheckVerify(StatesGroup):
    check = State()


class FindVerify(StatesGroup):
    find = State()


class Menu(StatesGroup):
    menu = State()


check_menu = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
back = '‚Ü© –ù–∞–∑–∞–¥ ‚Ü©'
ok = '‚úÖ –í—Å–µ –≤–µ—Ä–Ω–æ ‚úÖ'
again = 'üîÑ –í–≤–µ—Å—Ç–∏ –∑–∞–Ω–æ–≤–æ üîÑ'

check_menu.add(again)
check_menu.add(back, ok)


@dp.message_handler(commands="start")
async def welcome(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    buttons = ['–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–∫—Å—Ç', '–ù–∞–π—Ç–∏ —Ä–∞–π—Ç–µ—Ä–∞']
    keyboard.add(*buttons)
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=keyboard)


@dp.message_handler(commands="tables")
async def tables(message: types.Message):
    await message.answer('<b>–¢–∞–±–ª–∏—á–∫–∞ —Å —Ä–∞–π—Ç–µ—Ä–∞–º–∏:</b>\n'
                         'https://airtable.com/shrYRG0aDGDZVIyqM\n\n'
                         '<b>–¢–∞–±–ª–∏—á–∫–∞ —Å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤—â–∏–∫–∞–º–∏:</b>'
                         'https://airtable.com/shrLvAUQoUuSO5o0r\n\n'
                         '<b>–ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫:</b>'
                         'https://airtable.com/shrIsxGNwih9EPqwb\n\n'
                         '<b>–¢–∞–±–ª–∏—á–∫–∞ —Å –∫–æ—Ä—Ä–µ–∫—Ç–æ—Ä–∞–º–∏ (–±—É–¥–µ—Ç –ø–æ–ø–æ–ª–Ω—è—Ç—å—Å—è):</b>'
                         'https://airtable.com/shrgsYLzhAr4yifTT\n\n'
                         '<b>–¢–∞–±–ª–∏—á–∫–∞ —Å —Ä–∞–π—Ç–µ—Ä–∞–º–∏ –Ω–∞ —Ç–µ—Å—Ç:</b>'
                         'https://airtable.com/shrldFcxVQpVSv7NG\n\n'
                         '<b>–ü–∞–º—è—Ç–∫–∞ —Å –±—Ä–∏—Ñ–æ–º –¥–ª—è —Ä–∞–π—Ç–µ—Ä–∞:</b>'
                         'https://docs.google.com/document/d/1aJbufcnXa7bjpcoqULIaNrR5KauPugmibnQT2xuzfy8/edit#heading=h.ep89xw7idfw2\n\n'
                         '<b>–ì–∞–π–¥ –ø–æ —Ç–µ–∑–ø–ª–∞–Ω–∞–º:</b>'
                         ' https://docs.google.com/document/d/18CAsEpWBieqg_qHtUcApl6mjQW4H2s0g1jYpOgqDvwk/edit?usp=sharing\n\n',
                         parse_mode='html'
                         )


@dp.message_handler(lambda message: message.text == "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–∫—Å—Ç")
async def text(message: types.Message):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ\n'
                         '–¢–µ–∫—Å—Ç:\n'
                         '–ö–ª–∏–µ–Ω—Ç:\n'
                         '–°–ú–ò:\n'
                         '–î–∞—Ç–∞ —Å–¥–∞—á–∏ –º–µ–Ω–µ–¥–∂–µ—Ä—É (–≤ —Ñ–æ—Ä–º–∞—Ç–µ 15.04.2022):\n'
                         '–†–∞–π—Ç–µ—Ä:\n'
                         '–ú–µ–Ω–µ–¥–∂–µ—Ä:\n'
                         '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤:\n'
                         '–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–µ–∫—Å—Ç:\n'
                         )
    await Check.check.set()


@dp.message_handler(lambda message: message.text == "–ù–∞–π—Ç–∏ —Ä–∞–π—Ç–µ—Ä–∞")
async def check(message: types.Message):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ\n'
                         '–ù–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞:\n'
                         '–ö–ª–∏–µ–Ω—Ç:\n'
                         '–°–ú–ò:\n'
                         '–ú–µ–Ω–µ–¥–∂–µ—Ä:\n'
                         '–ö –∫–∞–∫–æ–º—É —Å—Ä–æ–∫—É –Ω–∞–π—Ç–∏:\n'
                         '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π/–±—Ä–∏—Ñ(–º–æ–∂–Ω–æ –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–π)')
    await Find.find.set()


@dp.message_handler(state=Check.check)
async def text(message: types.Message, state: FSMContext):
    global records
    values = message.text.split('\n')
    if len(values) != 8:
        await message.answer('–ü–æ—Ö–æ–∂–µ –≤—ã –≤–≤–µ–ª–∏ –Ω–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ \n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
        await message.answer('<em><b>–ü—Ä–∏–º–µ—Ä –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö:</b></em>', parse_mode='html')
        await message.answer('–ú–µ—Ç–∞–≤—Å–ª–µ–Ω–Ω–∞—è\n–°–∫–æ–ª–∫–æ–≤–æ\n–ü–æ–ø–º–µ—Ö\n25.03.2022\n–ê–Ω—è\n–ê–ª–ª–∞\n3214\ndocs.google.com')
        await Check.check.set()
    else:
        values.append(values[0] + ' ' + values[1] + ' ' + values[2])
        date = values[3]
        new_date = date.split('.')
        try:
            new_date = new_date[2] + '-' + new_date[1] + '-' + new_date[0]
            values[3] = new_date
            keys = ['–ù–∞–∑–≤–∞–Ω–∏–µ', '–ö–ª–∏–µ–Ω—Ç', '–°–ú–ò', '–°–¥–∞—á–∞ –º–µ–Ω–µ–¥–∂–µ—Ä—É', '–†–∞–π—Ç–µ—Ä', '–ú–µ–Ω–µ–¥–∂–µ—Ä', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤',
                    '–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–µ–∫—Å—Ç', '–°–∞–º–º–∞—Ä–∏']
            records = dict(zip(keys, values))

            await message.answer(
                '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞:\n'
                + '<b>–¢–µ–∫—Å—Ç - </b>' + values[0] + '\n'
                + '<b>–ö–ª–∏–µ–Ω—Ç - </b>' + values[1] + '\n'
                + '<b>–°–ú–ò - </b>' + values[2] + '\n'
                + '<b>–î–∞—Ç–∞ —Å–¥–∞—á–∏ –º–µ–Ω–µ–¥–∂–µ—Ä—É - </b>' + date + '\n'
                + '<b>–†–∞–π—Ç–µ—Ä - </b>' + values[4] + '\n'
                + '<b>–ú–µ–Ω–µ–¥–∂–µ—Ä - </b>' + values[5] + '\n'
                + '<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ - </b>' + values[6] + '\n'
                + '<b>–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–µ–∫—Å—Ç - </b>' + values[7] + '\n',
                parse_mode='html', reply_markup=check_menu)

            await CheckVerify.check.set()

        except IndexError:
            await message.answer('–í–≤–æ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ')
            await message.answer('<em><b>–ü—Ä–∏–º–µ—Ä –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö:</b></em>', parse_mode='html')
            await message.answer('–ú–µ—Ç–∞–≤—Å–ª–µ–Ω–Ω–∞—è\n–°–∫–æ–ª–∫–æ–≤–æ\n–ü–æ–ø–º–µ—Ö\n25.03.2022\n–ê–Ω—è\n–ê–ª–ª–∞\n3214\ndocs.google.com')
            await Check.check.set()


@dp.message_handler(state=CheckVerify.check)
async def text(message: types.Message, state: FSMContext):
    if message.text == '‚úÖ –í—Å–µ –≤–µ—Ä–Ω–æ ‚úÖ':
        base = Base(api_key, 'appwuAIlKJxXX7doG')

        March = 'tblUCepR5Yjo0BRod'
        April = 'tbls6rXCfInJlat7x'
        May = 'tblqo6OYIbM7OdUsZ'
        June = 'tblgLiya3yRHwqlFN'
        July = 'tblVy52cLTpGtoskx'
        August = 'tblAWPFe7PvdpTJm4'
        September = 'tblhnsRX0TAZzlNKv'
        October = 'tblZATgeU917anRt9'
        November = 'tblaY3xacc7ZMsuB6'
        December = 'tblNqV3cUDI7YuSWo'

        date = records.get('–°–¥–∞—á–∞ –º–µ–Ω–µ–¥–∂–µ—Ä—É').split('-')
        mounth = date[1]

        if mounth == '03':
            base.create(March, records)
        elif mounth == '04':
            base.create(April, records)
        elif mounth == '05':
            base.create(May, records)
        elif mounth == '06':
            base.create(June, records)
        elif mounth == '07':
            base.create(July, records)
        elif mounth == '08':
            base.create(August, records)
        elif mounth == '09':
            base.create(September, records)
        elif mounth == '10':
            base.create(October, records)
        elif mounth == '11':
            base.create(November, records)
        elif mounth == '12':
            base.create(December, records)

        await message.answer('–î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ AirTable')
        await state.finish()
        await welcome(message)
        global chat_id
        chat_id = message.chat.id
        markup = types.InlineKeyboardMarkup()
        ok = types.InlineKeyboardButton('üî• –≤—Å–µ –æ–∫ üî•', callback_data='ok')
        good = types.InlineKeyboardButton('üëå –ø–∞—Ä–∞ –ø—Ä–∞–≤–æ–∫ üëå', callback_data='good')
        bad = types.InlineKeyboardButton('‚ùó –º–Ω–æ–≥–æ –ø—Ä–∞–≤–æ–∫ ‚ùó', callback_data='bad')
        awful = types.InlineKeyboardButton('‚õî –≤—Å–µ –ø–ª–æ—Ö–æ ‚õî', callback_data='awful')

        markup.add(ok, good)
        markup.add(bad, awful)

        date = records.get('–°–¥–∞—á–∞ –º–µ–Ω–µ–¥–∂–µ—Ä—É').split('-')
        new_date = date[2] + '.' + date[1] + '.' + date[0]
        await bot.send_message(-1001644325585, '<b>–¢–µ–∫—Å—Ç - </b>' + records.get('–ù–∞–∑–≤–∞–Ω–∏–µ') + '\n'
                               + '<b>–ö–ª–∏–µ–Ω—Ç - </b>' + records.get('–ö–ª–∏–µ–Ω—Ç') + '\n'
                               + '<b>–°–ú–ò - </b>' + records.get('–°–ú–ò') + '\n'
                               + '<b>–î–∞—Ç–∞ —Å–¥–∞—á–∏ –º–µ–Ω–µ–¥–∂–µ—Ä—É - </b>' + new_date + '\n'
                               + '<b>–†–∞–π—Ç–µ—Ä - </b>' + records.get('–†–∞–π—Ç–µ—Ä') + '\n'
                               + '<b>–ú–µ–Ω–µ–¥–∂–µ—Ä - </b>' + records.get('–ú–µ–Ω–µ–¥–∂–µ—Ä') + '\n'
                               + '<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ - </b>' + records.get('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤') + '\n'
                               + '<b>–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–µ–∫—Å—Ç - </b>' + records.get('–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–µ–∫—Å—Ç') + '\n',
                               parse_mode='html', reply_markup=markup)

    elif message.text == '‚Ü© –ù–∞–∑–∞–¥ ‚Ü©':
        await state.finish()
        await welcome(message)

    elif message.text == 'üîÑ –í–≤–µ—Å—Ç–∏ –∑–∞–Ω–æ–≤–æ üîÑ':
        await Check.check.set()
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ\n'
                             '–¢–µ–∫—Å—Ç:\n'
                             '–ö–ª–∏–µ–Ω—Ç:\n'
                             '–°–ú–ò:\n'
                             '–î–∞—Ç–∞ —Å–¥–∞—á–∏ –º–µ–Ω–µ–¥–∂–µ—Ä—É (–≤ —Ñ–æ—Ä–º–∞—Ç–µ 15.04.2022):\n'
                             '–†–∞–π—Ç–µ—Ä:\n'
                             '–ú–µ–Ω–µ–¥–∂–µ—Ä:\n'
                             '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤:\n'
                             '–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–µ–∫—Å—Ç:\n')


@dp.callback_query_handler(lambda c: c.data)
async def answer(call: types.CallbackQuery):
    if call.data == 'ok':
        await bot.send_message(chat_id, text='<b>–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ</b>' + '\n\n' + call.message.text + '\n\n' +
                                             '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: –∑–∞–±–∏—Ä–∞–π—Ç–µ, –≤—Å–µ –æ–∫', parse_mode='html')
    elif call.data == 'good':
        await bot.send_message(chat_id, text='<b>–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ</b>' + '\n\n' + call.message.text + '\n\n' +
                                             '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: –Ω–æ—Ä–º, –ø–∞—Ä–∞ –ø—Ä–∞–≤–æ–∫', parse_mode='html')
    elif call.data == 'bad':
        await bot.send_message(chat_id, text='<b>–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ</b>' + '\n\n' + call.message.text + '\n\n' +
                                             '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: –∑–∞–±–∏—Ä–∞–π—Ç–µ, –ø—Ä–∞–≤–æ–∫ –º–Ω–æ–≥–æ ‚Äî –ø—Ä–∞–≤—å—Ç–µ, –ª—É—á—à–µ –ø–æ–∫–∞–∑–∞—Ç—å –µ—â—ë —Ä–∞–∑',
                               parse_mode='html')
    elif call.data == 'awful':
        await bot.send_message(chat_id, text='<b>–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ</b>' + '\n\n' + call.message.text + '\n\n' +
                                             '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: –≤—Å–µ –ø–ª–æ—Ö–æ, –ø—Ä–∏—Ö–æ–¥–∏—Ç–µ –æ–±—Å—É–∂–¥–∞—Ç—å', parse_mode='html')

    link = types.InlineKeyboardMarkup()
    item1 = types.InlineKeyboardButton('–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ', url='https://airtable.com/appwuAIlKJxXX7doG')

    link.add(item1)

    await bot.edit_message_reply_markup(-1001644325585, message_id=call.message.message_id, reply_markup=link)


@dp.message_handler(state=Find.find)
async def text(message: types.Message, state: FSMContext):
    global records1
    values = message.text.split('\n', 5)
    if len(values) != 6:
        await message.answer('–ü–æ—Ö–æ–∂–µ –≤—ã –≤–≤–µ–ª–∏ –Ω–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ \n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
        await message.answer('<em><b>–ü—Ä–∏–º–µ—Ä –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö:</b></em>', parse_mode='html')
        await message.answer('–ú–µ—Ç–∞–≤—Å–ª–µ–Ω–Ω–∞—è\n–°–∫–æ–ª–∫–æ–≤–æ\n–ü–æ–ø–º–µ—Ö\n–ê–ª–ª–∞\n–ó–∞–≤—Ç—Ä–∞\n–º–Ω–æ–≥–æ—Å—Ç–æ—Ä–æ—á–Ω—ã–π\n'
                             '–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π\n–∏–ª–∏\n–±—Ä–∏—Ñ')

    else:
        values.append(values[3] + ' / ' + values[1] + ' / ' + values[0])
        keys = ['–ù–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞', '–ö–ª–∏–µ–Ω—Ç', '–°–ú–ò', '–ú–µ–Ω–µ–¥–∂–µ—Ä', '–ö –∫–∞–∫–æ–º—É —Å—Ä–æ–∫—É –Ω–∞–π—Ç–∏', '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π/–±—Ä–∏—Ñ',
                '–°–∞–º–º–∞—Ä–∏']
        records1 = dict(zip(keys, values))

        await message.answer(
            '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞:\n'
            + '<b>–ù–∞–≤–∑–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ - </b>' + values[0] + '\n'
            + '<b>–ö–ª–∏–µ–Ω—Ç - </b>' + values[1] + '\n'
            + '<b>–°–ú–ò - </b>' + values[2] + '\n'
            + '<b>–ú–µ–Ω–µ–¥–∂–µ—Ä - </b>' + values[3] + '\n'
            + '<b>–ö –∫–∞–∫–æ–º—É —Å—Ä–æ–∫—É –Ω–∞–π—Ç–∏ - </b>' + values[4] + '\n'
            + '<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π/–±—Ä–∏—Ñ - </b>' + values[5],
            parse_mode='html', reply_markup=check_menu)

        await FindVerify.find.set()


@dp.message_handler(state=FindVerify.find)
async def text(message: types.Message, state: FSMContext):
    if message.text == '‚úÖ –í—Å–µ –≤–µ—Ä–Ω–æ ‚úÖ':
        table = Table(api_key, 'appwuAIlKJxXX7doG', 'tblavyZtpfHcRropZ')
        table.create(records1)

        await message.answer('–î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ AirTable')
        await bot.send_message(-679434045, '<b>–ù–∞–∑–≤–∞–Ω–∏–µ - </b>' + records1.get('–ù–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞') + '\n'
                               + '<b>–ö–ª–∏–µ–Ω—Ç - </b>' + records1.get('–ö–ª–∏–µ–Ω—Ç') + '\n'
                               + '<b>–°–ú–ò - </b>' + records1.get('–°–ú–ò') + '\n'
                               + '<b>–ú–µ–Ω–µ–¥–∂–µ—Ä - </b>' + records1.get('–ú–µ–Ω–µ–¥–∂–µ—Ä') + '\n'
                               + '<b>–ö –∫–∞–∫–æ–º—É —Å—Ä–æ–∫—É –Ω–∞–π—Ç–∏ - </b>' + records1.get('–ö –∫–∞–∫–æ–º—É —Å—Ä–æ–∫—É –Ω–∞–π—Ç–∏') + '\n'
                               + '<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π/–±—Ä–∏—Ñ - </b>' + records1.get('–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π/–±—Ä–∏—Ñ'),
                               parse_mode='html')

    elif message.text == '‚Ü© –ù–∞–∑–∞–¥ ‚Ü©':
        await state.finish()
        await welcome(message)

    elif message.text == 'üîÑ –í–≤–µ—Å—Ç–∏ –∑–∞–Ω–æ–≤–æ üîÑ':
        await Find.find.set()
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ\n'
                             '–ù–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞:\n'
                             '–ö–ª–∏–µ–Ω—Ç:\n'
                             '–°–ú–ò:\n'
                             '–ú–µ–Ω–µ–¥–∂–µ—Ä:\n'
                             '–ö –∫–∞–∫–æ–º—É —Å—Ä–æ–∫—É –Ω–∞–π—Ç–∏:\n'
                             '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π/–±—Ä–∏—Ñ(–º–æ–∂–Ω–æ –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–π)')


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    executor.start_polling(dp, skip_updates=True)
